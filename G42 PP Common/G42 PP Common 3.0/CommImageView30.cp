#include "CommImageView30.h"#include "gicppsur.h"#include "gicmapr.h"#include "gimarch.h"#ifdef OLDWAYshort CommImageView30::sWindowBorder = 10;#endifCommImageView30 *CommImageView30::CreateImageViewStream (LStream *inStream){return (new CommImageView30 (inStream));}CommImageView30::CommImageView30 (LStream *inStream) : 	LView (inStream),	Scale (1.0), 	SurfaceController (0), 	MapController (0){}CommImageView30::~CommImageView30 (void){	if (SurfaceController)	{		delete SurfaceController;		SurfaceController = 0;	}	if (MapController)	{		delete MapController;		MapController = 0;	}}voidCommImageView30::AdjustCursorSelf (Point inPortPt, const EventRecord & /* inMacEvent */){/*  Default Operation  (?)  */	FocusDraw();	Point localPoint = inPortPt;	PortToLocalPoint (localPoint);		int8 button = Button() ? G42LeftButton : G42NoButton;	SurfaceController -> 		MouseMove (G42Point (localPoint.h, localPoint.v), button);}void CommImageView30::ClickSelf (const SMouseDownEvent &inMouseDown){	if (! IsActive())		Activate();	FocusDraw();	if (ClickTimesAreClose (LastClickTime))	{		SurfaceController -> MouseDoubleClick (G42Point (inMouseDown.whereLocal.h,			inMouseDown.whereLocal.v));	}	else	{		SurfaceController -> MouseDown (G42Point (inMouseDown.whereLocal.h,			inMouseDown.whereLocal.v));		Point oldMouse = inMouseDown.whereLocal;		{			Point newMouse = oldMouse;			while (Button()) 			{				GetMouse (&newMouse);				if (! EqualPt (newMouse, oldMouse)) 				{					int8 button = Button() ? G42LeftButton : G42NoButton;					SurfaceController -> 						MouseMove (G42Point (newMouse.h, newMouse.v), button);				}				oldMouse = newMouse;			}			SurfaceController -> MouseUp (G42Point (newMouse.h, newMouse.v));		}	}	LastClickTime = inMouseDown.macEvent.when;	#ifdef OLDWAY 	int button = (inMouseDown.macEvent.modifiers & optionKey) ? 3 : 1;	int count = ClickTimesAreClose (LastClickTime) ? 1 : 0;	SingleImageView -> MouseDown (inMouseDown.whereLocal.h, 		inMouseDown.whereLocal.v, button, false, false, count);		Point oldMouse = inMouseDown.whereLocal;	{		Point newMouse = oldMouse;		while (Button()) 		{			GetMouse (&newMouse);			#if 0			short xx = newMouse.h;			short yy = newMouse.v;			#endif			if (! EqualPt (newMouse, oldMouse)) 				SingleImageView -> MouseMove (newMouse.h, newMouse.v, false, false);				oldMouse = newMouse;		}		SingleImageView -> MouseUp (newMouse.h, newMouse.v, 1, false, false);	}	LastClickTime = inMouseDown.macEvent.when;	#endif}BooleanCommImageView30::ClickTimesAreClose (Uint32 inLastClickTime){	return ((sWhenLastMouseDown - inLastClickTime) <= GetDblTime());}void CommImageView30::DrawSelf (void){	if (SurfaceController)	{		#define DRAW_SLIVER		#ifdef DRAW_SLIVER		RgnHandle region = GetLocalUpdateRgn ();		Rect rRect = (**region).rgnBBox;//		SurfaceController -> Draw (rRect.left, rRect.top, rRect.right, rRect.bottom);		SurfaceController -> Draw (G42Rect (rRect));		DisposeRgn (region);		#else		SurfaceController -> Rebuild();		#endif	}	#ifdef OLDWAY	if (SingleImageView)	{		/* 	Step 1:  Synchronize view to scroll positions */		SPoint32 pos;		GetScrollPosition (pos);		SingleImageView -> SetPanXY (pos.h, pos.v);			/* 	Step 2:  Draw the image view				 */		#ifdef NOTYET		if (! Button())		{			WebImageApp::InDrawing = true;	//fix			CallBack();	//fix		}		#endif		#ifdef USE_PROFILER		if (! ProfilerInitialized)		{			if (ProfilerInit (collectDetailed, bestTimeBase, 30, 10))				SysBeep (0);								ProfilerInitialized = true;		}		#endif		#define DRAW_SLIVER		#ifdef DRAW_SLIVER		RgnHandle region = GetLocalUpdateRgn ();		Rect rRect = (**region).rgnBBox;	#ifdef USE_PROFILER	ProfilerSetStatus (true);	#endif		SingleImageView -> Draw (rRect.left, rRect.top, rRect.right, rRect.bottom);	#ifdef USE_PROFILER	ProfilerSetStatus (false);	#endif		DisposeRgn (region);		#else		SingleImageView -> Draw();		#endif	}	#endif//	WebImageApp::InDrawing = false;	fix}void CommImageView30::FinishCreateSelf (void){	Window = GetWindowFromView (this);	G42PPScroller *scroller = (G42PPScroller *) Window -> FindPaneByID ('SCRL'); 	/*  G42 Image SDK 3.0 Stuff  */	SurfaceController 	= new G42PPSurfaceController ((*this), (*scroller), nil, this); 	MapController = new G42MapController();	SurfaceController -> SetMouseKeyController (MapController);	StartIdling();}LWindow*CommImageView30::GetWindowFromView (LView *view){	LView *tempView = view;	while (tempView) 	{		tempView = tempView -> GetSuperView ();		if (tempView)			view = tempView;	}	return ((LWindow *) view);}BooleanCommImageView30::HandleKeyPress (const EventRecord &inKeyEvent){//	byte lower = inKeyEvent.message;//	byte upper = (inKeyEvent.message >> 8);	FocusDraw();	byte key = inKeyEvent.message;	SurfaceController -> KeyDown (key);	return true;}/*  The notification message depot  */boolCommImageView30::ProcessMessage (G42NotifyMessage *message){	bool value = false;		if (dynamic_cast <G42MousePos *> (message) != 0)	{		// Process mouse-pos msg			}	else	{		G42QueryURL *query = dynamic_cast <G42QueryURL *> (message);		if (query != 0)		{				query -> URL 		= "This URL's from CommImageView30";			query -> Comment 	= "This Comment's from CommImageView30";			query -> AltText 	= "This AltText's from CommImageView30";			value = true;	// TBD from dialog that comes up			}	}	return value;}voidCommImageView30::ResizeFrameBy (Int16 inWidthDelta, Int16 inHeightDelta, Boolean /* inRefresh */){//	inherited::ResizeFrameBy (inWidthDelta, inHeightDelta, false);	LView::ResizeFrameBy (inWidthDelta, inHeightDelta, false);	Rect rect;	CalcLocalFrameRect (rect);	SurfaceController -> ResizeViewport (G42Size ((rect.right - rect.left), (rect.bottom - rect.top)));}/*-------------------------------------------------------------------------------  SetScale() deals with scale changes--------------------------------------------------------------------------------*/void CommImageView30::SetScale (const float scale){	/*  Step 1:  Inform surface controller  */	Scale = scale;	SurfaceController -> SetScaleTranslate (G42ScaleTranslate (scale, scale));	/*  Step 2: Refresh (simple)									*/// 	Draw (nil);	Refresh();	// Temporarily want the background redrawn}void CommImageView30::SpendTime (const EventRecord & /* inMacEvent */){		if (FocusExposed())	{		if (G42MarchingAnts::BeginMarch())			SurfaceController -> IdleAction();		G42MarchingAnts::EndMarch();	}}