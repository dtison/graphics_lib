/*------------------------------------------------------------------------------------CommMapController -- Dispatcher & controller for Map mode / URL dialogThis controller is bi-directional:1.  Takes messages from the modeless dialog buttons and sends the comands off to the doc 2.  Takes messages from the doc and updates the panes in the modeless dialog, aka the listbox-------------------------------------------------------------------------------------*/#include <UReanimator.h>#include "CommMapController.h"#ifdef KH_class LListBox;#endif/*  String table  */const ResIDT	STRx_CommMapController		= 128;/*  STRx_CommMapController indexes  */const ResIDT	str_Rectangle				= 1;const ResIDT	str_Circle					= 2;const ResIDT	str_Polygon					= 3;const ResIDT	str_Point					= 4;const ResIDT	str_Default					= 5;CommMapController::CommMapController (LCommander *commander, 	CommWebImageObject *wiObject, LWindow *mapDialog) : 	ActiveCommander (commander), ActiveWIObject (wiObject), MapDialog (mapDialog){	ActiveMap 		= ActiveWIObject -> GetImageMap();	/*  Listen to the Map "Dialog" Window	*/		UReanimator::LinkListenerToControls (this, mapDialog, dialog_ViewURLDlg);	/*  For some reason I couldn't link the LStdListBox control with the Reanimator..  */	LListBox *box = (LListBox *) mapDialog -> FindPaneByID (pane_ViewURLListBox);	if (box)		box -> AddListener (this);	ListBox 		= (LListBox *) MapDialog -> FindPaneByID (pane_ViewURLListBox);	TheListHandle 	= ListBox -> GetMacListH();	::LAddColumn (1, 1, TheListHandle);	SetupButtons();}CommMapController::~CommMapController (void){}void CommMapController::ListenToMessage (MessageT inMessage, void *ioParam){	CommandT command = cmd_Nothing;	switch (inMessage)	{		#if 0		case pane_ViewURLListBox:			SysBeep (0);		break;		#endif		case value_ViewURLMoveUp:			MoveElement (true);		break;		case value_ViewURLMoveDn:			MoveElement (false);		break;		case value_ViewURLEdit:			Edit();		break;		case value_ViewURLDelete:			Delete();		break;		case value_ViewURLOk:			MapDialog -> AttemptClose();		break;		case value_ViewURLAddDefault:			AddDefault();		break;		case value_ViewURLListBoxDblClk:			DoubleClick();		break;	}}voidCommMapController::MoveElement (Boolean moveUp){	Boolean found;	short index = GetCellSelectionAsIndex (found);		short minIndex  = ActiveMap -> HasDefault() ? 1 : 0;	if (found)	{		Boolean canMove= false;		if (moveUp)			canMove = (index > minIndex) ? true : false;		else		{				uint numElements = ActiveMap -> GetNumElements();			if (index >= minIndex)	// Can't move zero'th element if it's a default				canMove = (index < (numElements - 1)) ? true : false;		}		if (canMove)		{			short count = moveUp ? -1 : 1;			ActiveMap -> MoveElementPos (index + count, index);			UpdateListBox ((index + count), false, false, false);		}		else			SysBeep (0);		}	/*  The target may have shifted, fix it  */	LCommander::SwitchTarget (ActiveCommander);}voidCommMapController::Edit (void){	/*  Find the currently selected element to initialize dialog  */	Boolean found;	uint index = GetCellSelectionAsIndex (found);		if (found)	{		EditURL (ActiveMap, index);		UpdateListBox (index, false, false, false);			}	else		SysBeep (0);	LCommander::SwitchTarget (ActiveCommander);}voidCommMapController::Delete (void){	Boolean found;	short index = GetCellSelectionAsIndex (found);		if (found)	{		ActiveMap -> DeleteElement (index);		uint numElements = ActiveMap -> GetNumElements();		if (index == numElements)			index--;		UpdateListBox (index, false, true, true);	}	else		SysBeep (0);	LCommander::SwitchTarget (ActiveCommander);}voidCommMapController::DoubleClick (void){	EventRecord event;		EventAvail (everyEvent, &event);	if (event.modifiers & optionKey) // If option down, changes current map selection 	{				Boolean found;		short index = GetCellSelectionAsIndex (found);			if (found)			ActiveMap -> SelectElement (index);	}	else		Edit();}voidCommMapController::AddDefault (void){	CommEditURLInfo *info = new CommEditURLInfo;	DlgStatus status = EditURLDialog (ActiveCommander, info);		if (status == Ok)	{		ActiveMap -> AddElement (G42ImageMap::Default, 0, 0, 0, 0, info -> URL,			info -> Comment, info -> AltText, 0);		UpdateListBox (0, false, false, true);	}	delete info;	LCommander::SwitchTarget (ActiveCommander);}voidCommMapController::UpdateListBox (short selectIndex, Boolean redrawMap, 	Boolean redrawDocument, Boolean refreshButtons){	/*  Update our listbox display with URLs from the Document, if any  */	if (ActiveMap)	{		char *buffer = new char [1024];		/*  Turn off drawing and erase all the elements in the LListbox  */		::LSetDrawingMode (false, TheListHandle);		::LDelRow (0, 1, TheListHandle);		/*  Fill it up with the elements in the map  */		uint numElements = ActiveMap -> GetNumElements();		if (numElements)		{			::LAddRow ((numElements << 1), 1, TheListHandle);			Cell cell;			cell.h = cell.v = 0;			for (uint i = 0; i < numElements; i++)			{				const G42ImageMap::G42MapElement *element = ActiveMap -> GetElement (i);				Str255 pString;				::GetIndString (pString, STRx_CommMapController, (int) (element -> Type + 1));				char *cString = p2cstr (pString);				sprintf (buffer, "%s %s", cString, element -> URL);					cell.v = (i << 1);				::LSetCell (buffer, strlen (buffer), cell, TheListHandle);				sprintf (buffer, "%s %s", element -> Comment, element -> AltText);				cell.v++;				::LSetCell (buffer, strlen (buffer), cell, TheListHandle);			}		}		delete [] buffer;		/*  Deal with current highlighted selection  */		if (selectIndex != -1)		{			Cell cell;			cell.h = 0;			cell.v = (selectIndex << 1);			::LSetSelect (true, cell, TheListHandle);			#if 0			cell.v++;			::LSetSelect (true, cell, TheListHandle);			#endif		}		::LSetDrawingMode (true, TheListHandle);		ListBox -> Refresh();	}	// These possibly should go somewhere else..  (Old stuff)	#if 0	if (redrawMap)		(CImageDoc::ActiveImageView -> GetImageViewer()) -> DrawImageMap(); 	if (redrawDocument)		CImageDoc::ActiveImageView -> Refresh();	#endif	if (refreshButtons)			SetupButtons();}voidCommMapController::SetupButtons (void){	uint numElements = 0;	if (ActiveMap)		numElements = ActiveMap -> GetNumElements();	/*  Go ahead and enable / disable buttons as appropriate  */		LButton *buttonEdit 	= (LButton *) MapDialog -> FindPaneByID (pane_ViewURLEdit);	LButton *buttonDelete 	= (LButton *) MapDialog -> FindPaneByID (pane_ViewURLDelete);	LButton *buttonMoveUp 	= (LButton *) MapDialog -> FindPaneByID (pane_ViewURLMoveUp);	LButton *buttonMoveDn 	= (LButton *) MapDialog -> FindPaneByID (pane_ViewURLMoveDn);	LButton *buttonAddDef 	= (LButton *) MapDialog -> FindPaneByID (pane_ViewURLAddDefault);	if (numElements)	{		buttonEdit 	 -> Enable();				buttonDelete -> Enable();				buttonMoveUp -> Enable();				buttonMoveDn -> Enable();			}	else	{		buttonEdit 	 -> Disable();				buttonDelete -> Disable();				buttonMoveUp -> Disable();		buttonMoveDn -> Disable();			}	buttonMoveUp -> Refresh();	buttonMoveDn -> Refresh();	if (ActiveMap)	{		if (ActiveMap -> HasDefault())			buttonAddDef -> Disable();		else			buttonAddDef -> Enable();	}	else		buttonAddDef -> Disable();}/*  (Prev) Static things that used to be CImageDoc  */boolCommMapController::AddMapElement (G42ImageMap::G42MapElement & element){	int ret = false;	CommEditURLInfo *info = new CommEditURLInfo;	DlgStatus status = EditURLDialog (ActiveCommander, info);		if (status == Ok)	{		char *url		= new char [URL_TEXT_SIZE];		char *comment 	= new char [URL_TEXT_SIZE];		char *altText 	= new char [URL_TEXT_SIZE];		strcpy (url, info -> URL);		strcpy (comment, info -> Comment);		strcpy (altText, info -> AltText);			element.URL 	= url;		element.Comment = comment;		element.AltText = altText;		/*  Add element to the map  */			uint index = ActiveMap -> GetNumElements();		ActiveMap -> SetElement (index, element);		element.URL = element.Comment = element.AltText = 0;		ret = true;		/*  Erase old element and selected element  */		ActiveWIObject -> DrawImageMapElement (index);		int old_sel = -1;		if (ActiveMap -> HasSelectedElement())		{			old_sel = ActiveMap -> GetSelectedElement();			ActiveWIObject -> DrawImageMapElement (old_sel);		}		/*  Select the new element, draw new & old  */		(ActiveWIObject -> GetImageMap()) -> SelectElement(index);		ActiveWIObject -> DrawImageMapElement(index);		if (old_sel > -1)			ActiveWIObject -> DrawImageMapElement(old_sel);		delete [] url;		delete [] comment;		delete [] altText;			AddMapElement();	// TODO:  COMBINE THESE	}	delete info;	return false;}voidCommMapController::AddMapElement (void){	if (ActiveCommander)	{		short selectIndex = (ActiveMap -> GetNumElements() - 1);		UpdateListBox (selectIndex, false, false, true);//		UpdateListBox (selectIndex, false, true, true);	}	}voidCommMapController::MapSelChanged (void){	Cell cell;	cell.h = 0;	/*  Un-highlight everyone */	for (short i = 0; i < (ActiveMap -> GetNumElements() << 1); i++)	{		cell.v = i;		::LSetSelect (false, cell, TheListHandle);	}			/*  Highlight the selected element  */ 	short index = ActiveMap -> GetSelectedElement();	cell.v = (index << 1);	::LSetSelect (true, cell, TheListHandle);	LCommander::SwitchTarget (ActiveCommander);}voidCommMapController::EditMapElement (uint index){	EditURL (ActiveMap, index);	UpdateListBox (index, false, false, true);}voidCommMapController::EditURL (G42ImageMap *map, uint index){	#ifdef WHY_WAS_THIS	// ???	if (index == 0)	{		SysBeep (0);		return;	}	#endif	const G42ImageMap::G42MapElement *element = map -> GetElement (index);	CommEditURLInfo *info = new CommEditURLInfo;	strcpy (info -> URL, element -> URL);	strcpy (info -> Comment, element -> Comment);	strcpy (info -> AltText, element -> AltText);	DlgStatus status = EditURLDialog (ActiveCommander, info);	if (status == Ok)	{		/*  Change the map element  */		map -> SetElementURL (index, info -> URL);		map -> SetElementComment (index, info -> Comment);		map -> SetElementAltText (index, info -> AltText);	}	delete info;}DlgStatusCommMapController::EditURLDialog (LCommander *inSuper, CommEditURLInfo *info){	CommEditURLDlg *dialog = new CommEditURLDlg;	DlgStatus returnValue = dialog -> Dialog (inSuper, dialog_EditURLDlg, info);	delete dialog;	return returnValue;}/*  Returns cell selection as map element index  */shortCommMapController::GetCellSelectionAsIndex (Boolean &found){	Cell cell;	cell.h = cell.v = 0;	found = ::LGetSelect (true, &cell, TheListHandle);	return (cell.v >> 1);}